// Generated by gencpp from file robotino_leds/SinalizeRequest.msg
// DO NOT EDIT!


#ifndef ROBOTINO_LEDS_MESSAGE_SINALIZEREQUEST_H
#define ROBOTINO_LEDS_MESSAGE_SINALIZEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotino_leds
{
template <class ContainerAllocator>
struct SinalizeRequest_
{
  typedef SinalizeRequest_<ContainerAllocator> Type;

  SinalizeRequest_()
    : mode(0)
    , colors()
    , times(0)
    , rate(0.0)  {
    }
  SinalizeRequest_(const ContainerAllocator& _alloc)
    : mode(0)
    , colors(_alloc)
    , times(0)
    , rate(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _mode_type;
  _mode_type mode;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _colors_type;
  _colors_type colors;

   typedef int8_t _times_type;
  _times_type times;

   typedef float _rate_type;
  _rate_type rate;




  typedef boost::shared_ptr< ::robotino_leds::SinalizeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotino_leds::SinalizeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SinalizeRequest_

typedef ::robotino_leds::SinalizeRequest_<std::allocator<void> > SinalizeRequest;

typedef boost::shared_ptr< ::robotino_leds::SinalizeRequest > SinalizeRequestPtr;
typedef boost::shared_ptr< ::robotino_leds::SinalizeRequest const> SinalizeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotino_leds::SinalizeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robotino_leds

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotino_leds::SinalizeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotino_leds::SinalizeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotino_leds::SinalizeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f66c2fda7161a25d3b026e1bd4812b6a";
  }

  static const char* value(const ::robotino_leds::SinalizeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf66c2fda7161a25dULL;
  static const uint64_t static_value2 = 0x3b026e1bd4812b6aULL;
};

template<class ContainerAllocator>
struct DataType< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotino_leds/SinalizeRequest";
  }

  static const char* value(const ::robotino_leds::SinalizeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 mode\n\
\n\
\n\
\n\
\n\
int8[] colors\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
int8 times\n\
\n\
\n\
\n\
float32 rate\n\
\n\
\n\
";
  }

  static const char* value(const ::robotino_leds::SinalizeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.colors);
      stream.next(m.times);
      stream.next(m.rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SinalizeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotino_leds::SinalizeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotino_leds::SinalizeRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "colors[]" << std::endl;
    for (size_t i = 0; i < v.colors.size(); ++i)
    {
      s << indent << "  colors[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.colors[i]);
    }
    s << indent << "times: ";
    Printer<int8_t>::stream(s, indent + "  ", v.times);
    s << indent << "rate: ";
    Printer<float>::stream(s, indent + "  ", v.rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTINO_LEDS_MESSAGE_SINALIZEREQUEST_H
