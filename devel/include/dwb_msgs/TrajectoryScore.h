// Generated by gencpp from file dwb_msgs/TrajectoryScore.msg
// DO NOT EDIT!


#ifndef DWB_MSGS_MESSAGE_TRAJECTORYSCORE_H
#define DWB_MSGS_MESSAGE_TRAJECTORYSCORE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dwb_msgs/Trajectory2D.h>
#include <dwb_msgs/CriticScore.h>

namespace dwb_msgs
{
template <class ContainerAllocator>
struct TrajectoryScore_
{
  typedef TrajectoryScore_<ContainerAllocator> Type;

  TrajectoryScore_()
    : traj()
    , scores()
    , total(0.0)  {
    }
  TrajectoryScore_(const ContainerAllocator& _alloc)
    : traj(_alloc)
    , scores(_alloc)
    , total(0.0)  {
  (void)_alloc;
    }



   typedef  ::dwb_msgs::Trajectory2D_<ContainerAllocator>  _traj_type;
  _traj_type traj;

   typedef std::vector< ::dwb_msgs::CriticScore_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dwb_msgs::CriticScore_<ContainerAllocator> >::other >  _scores_type;
  _scores_type scores;

   typedef float _total_type;
  _total_type total;




  typedef boost::shared_ptr< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryScore_

typedef ::dwb_msgs::TrajectoryScore_<std::allocator<void> > TrajectoryScore;

typedef boost::shared_ptr< ::dwb_msgs::TrajectoryScore > TrajectoryScorePtr;
typedef boost::shared_ptr< ::dwb_msgs::TrajectoryScore const> TrajectoryScoreConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dwb_msgs::TrajectoryScore_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dwb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'nav_2d_msgs': ['/home/nic/catkin_wp/src/robot_navigation/nav_2d_msgs/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'dwb_msgs': ['/home/nic/catkin_wp/src/robot_navigation/dwb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90652c3baa56e59e6d92d4392bb29f00";
  }

  static const char* value(const ::dwb_msgs::TrajectoryScore_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90652c3baa56e59eULL;
  static const uint64_t static_value2 = 0x6d92d4392bb29f00ULL;
};

template<class ContainerAllocator>
struct DataType< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dwb_msgs/TrajectoryScore";
  }

  static const char* value(const ::dwb_msgs::TrajectoryScore_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Complete scoring for a given twist.\n\
\n\
# The trajectory being scored\n\
Trajectory2D traj\n\
# The Scores for each of the critics employed\n\
CriticScore[] scores\n\
# Convenience member that totals the critic scores\n\
float32 total\n\
\n\
================================================================================\n\
MSG: dwb_msgs/Trajectory2D\n\
# For a given velocity command, the poses that the robot will go to in the allotted time.\n\
\n\
# Input Velocity\n\
nav_2d_msgs/Twist2D velocity\n\
# Time difference between first and last poses\n\
duration duration\n\
# Poses the robot will go to, given our kinematic model\n\
geometry_msgs/Pose2D[] poses\n\
\n\
================================================================================\n\
MSG: nav_2d_msgs/Twist2D\n\
float64 x\n\
float64 y\n\
float64 theta\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
================================================================================\n\
MSG: dwb_msgs/CriticScore\n\
# The result from one critic scoring a Twist.\n\
# Name of the critic\n\
string name\n\
# Score for the critic, not multiplied by the scale\n\
float32 raw_score\n\
# Scale for the critic, multiplied by the raw_score and added to the total score\n\
float32 scale\n\
";
  }

  static const char* value(const ::dwb_msgs::TrajectoryScore_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj);
      stream.next(m.scores);
      stream.next(m.total);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryScore_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dwb_msgs::TrajectoryScore_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dwb_msgs::TrajectoryScore_<ContainerAllocator>& v)
  {
    s << indent << "traj: ";
    s << std::endl;
    Printer< ::dwb_msgs::Trajectory2D_<ContainerAllocator> >::stream(s, indent + "  ", v.traj);
    s << indent << "scores[]" << std::endl;
    for (size_t i = 0; i < v.scores.size(); ++i)
    {
      s << indent << "  scores[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dwb_msgs::CriticScore_<ContainerAllocator> >::stream(s, indent + "    ", v.scores[i]);
    }
    s << indent << "total: ";
    Printer<float>::stream(s, indent + "  ", v.total);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DWB_MSGS_MESSAGE_TRAJECTORYSCORE_H
